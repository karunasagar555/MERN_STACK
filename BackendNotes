Q) what is Node ? 
S:  Node is a (open source & cross platform) runtime environment for executing javascript code outside of a browser.
quite often we use node to build backend services also called APIs, these are the services that power our,
client applications like web app running inside of a web browser, mobile app running on a mobile device,
Node is ideal for building highly scalable, data intensive and real time backend services that power our,
client applications. with Node we can build web servers that respond to HTTP REQUESTS.

Q) why Node, what makes Node different? 
s: It is used/great for prototyping and agile development, it is used for building superfast & highly scalable
services, node is an excellent choice for building highly scalable services, it's used in production by large 
companies like paypal, uber, netflix etc, another reason for using node is, in node applications we use javascript
,so our code will be cleaner and consistent, another reason is,it has the largest ecosystem of open-source libraries
that are available to us.

NOTE : Node applications are highly scalable, and this is because of Non-Blocking/Asynchronous nature of Node. 
Node applications are Asynchronous by default. In Node we have a single thread to handle all requests.

NOTE : Every Browser has a javascript engine that takes our javascript code and converts it to code that a 
computer can understand. a Browser provides a run-time environment for javascript code.


- Node is a runtime environment for executing JS code. 

- Essentially, Node is a C++ program that embeds Chrome's v8 engine, the fastest 
JS engine in the world. 

- We use Node to build fast and scalable networking applications. It's a perfect 
choice for building RESTful services. 

- Node applications are single-threaded. That means a single thread is used to 
serve all clients. 

- Node applications are asynchronous or non-blocking by default. That means 
when the application involves I/O operations (eg accessing the file system or the 
network), the thread doesn't wait (or block) for the result of the operation. It is 
released to serve other clients. 

- This architecture makes Node ideal for building I/O-intensive applications. 

- You should avoid using Node for CPU-intensive applications, such as a video 
encoding service. Because while executing these operations, other clients have 
to wait for the single thread to finish its job and be ready to serve them. 

- In Node, we don't have browser environment objects such as window or the 
document object. Instead, we have other objects that are not available in 
browsers, such as objects for working with the file system, network, operating 
system, etc.





Q) what is Express ?
S: Express is a fast and light weight framework for building web applications(Restful APIs/Restful Services).
a framework gives our application a proper structure, so we can easily add more routes while keeping our application code maintainable. Express gives our application a skeleton/a structure.

NOTE : an Express application is essentially nothing but a bunch of Middleware functions.

NOTE : callback function is also called as Route Handler in express 




Q) what is a Json Web token ?
s: It is a Json object that is encoded using base 64 url algorithm.
a Json web token is like an Identification card. it has various attributes about the user,
we refer to these attributes as claims.


Q) What is the JSON Web Token structure?
S: In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:

Header
Payload
Signature
Therefore, a JWT typically looks like the following.

xxxxx.yyyyy.zzzzz




NOTE : Frameworks are used for building web applications.





/////////////////////// BUILDING RESTFUL APIS WITH EXPRESS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


So, in this section, you learned that:

- REST defines a set of conventions for creating HTTP services:

- POST: to create a resource
- PUT: to update it
- GET: to read it
- DELETE: to delete it 


- Express is a simple, minimalistic and lightweight framework for building web 
servers.



// Build a web server
const express = require(‘express’);
const app = express();



// Creating a course
app.post(‘/api/courses’, (req, res) => { 
 // Create the course and return the course object
 resn.send(course); 
});



// Getting all the courses 
app.get(‘/api/courses’, (req, res) => { 
 // To read query string parameters (?sortBy=name)
 const sortBy = req.query.sortBy;
 // Return the courses 
 res.send(courses);
});


// Getting a single course 

app.get(‘/api/courses/:id’, (req, res) => { 
 const courseId = req.params.id; 
 
 // Lookup the course
 // If not found, return 404 
 res.status(404).send(‘Course not found.’);

 // Else, return the course object
 res.send(course); 
});


// Updating a course 
app.put(‘/api/courses/:id’, (req, res) => { 
 // If course not found, return 404, otherwise update it
 // and return the updated object. 
});


// Deleting a course 
app.delete(‘/api/courses/:id’, (req, res) => { 
 // If course not found, return 404, otherwise delete it
 // and return the deleted object. 
});


// Listen on port 3000
app.listen(3000, () => console.log(‘Listening…’));


- We use Nodemon to watch for changes in files and automatically restart the 
node process.


- We can use environment variables to store various settings for an application. To 
read an environment variable, we use process.env. 


// Reading the port from an environment variable 
const port = process.env.PORT || 3000;
app.listen(port);


- You should never trust data sent by the client. Always validate! Use Joi package 
to perform input validation. 






///////////////////////  EXPRESS : ADVANCED-TOPICS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

So, in this section, you learned that: 



- A middleware function is a function that takes a request object and either 
terminates the request/response cycle or passes control to another middleware 
function.



- Express has a few built-in middleware functions:


- json(): to parse the body of requests with a JSON payload


- urlencoded(): to parse the body of requests with URL-encoded payload


- static(): to serve static files


- You can create custom middleware for cross-cutting concerns, such as logging, 
authentication, etc. 



// Custom middleware (applied on all routes) 
app.use(function(req, res, next)) { 
 // … 
 next(); 
} 



// Custom middleware (applied on routes starting with /api/admin) 
app.use(‘/api/admin’, function(req, res, next)) { 
 // … 
 next(); 
} 


- We can detect the environment in which our Node application is running 
(development, production, etc) using process.env.NODE_ENV and 
app.get(‘env’). 


- The config package gives us an elegant way to store configuration settings for 
our applications. 


- We can use the debug package to add debugging information to an application. 
Prefer this approach to console.log() statements. 


- To return HTML markup to the client, use a templating engine. There are various 
templating engines available out there. Pug, EJS and Mustache are the most 
popular ones.


////////////////////      MONGODB         /////////////////////////////////////////////////////


Q) what is MongoDB ?
S: MongoDB is an open-source document database. It stores data in flexible, JSON-like documents.
// It is a cross-platform, document oriented, database program, which is classified as a NoSql database.
// It is the most popular NoSql database programs


NOTE : by default MONGODB stores data in this directory /data/db


// Mongod -> Mongo Daemon is a service that runs on the background and listens for connections on a given port, 
which is basically our MongoDB server.


Q) what is Mongoose ?
S: it is a node package, which gives us a simple API to work with MONGOdb Database.
Mongoose is built on top of MONGODB Driver.

NOTE : A collection in MONGODB is like a Table in a relational database.

NOTE : A Document in MONGODB is like a Row in a relational database.

NOTE : In MONGOOSE, we have this concept called SCHEMA, it is specific to Mongoose, It is not part of mongodb.
 it is used to define the shape of documents in a MONGODB Collection, we use it to define what are the properties we have in this document.



 //////////////////       CRUD Operations using Mongoose and MongoDB       \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


So, in this section, you learned that: 

- MongoDB is an open-source document database. It stores data in flexible, JSON-like documents.


- In relational databases we have tables and rows, in MongoDB we have 
collections and documents. A document can contain sub-documents. 

- We don’t have relationships between documents. 

- To connect to MongoDB: 

// Connecting to MongoDB
const mongoose = require(‘mongoose’);
mongoose.connect(‘mongodb://localhost/playground')
 .then(() => console.log(‘Connected…’))
 .catch(err => console.error(‘Connection failed…’));



- To store objects in MongoDB, we need to define a Mongoose schema first. The 
schema defines the shape of documents in MongoDB. 


// Defining a schema 
const courseSchema = new mongoose.Schema({ 
 name: String,
 price: Number 
});


- We can use a SchemaType object to provide additional details:

// Using a SchemaType object 
const courseSchema = new mongoose.Schema({ 
 isPublished: { type: Boolean, default: false } 
});



- Supported types are: String, Number, Date, Buffer (for storing binary data), 
Boolean and ObjectID. 


- Once we have a schema, we need to compile it into a model. A model is like a 
class. It’s a blueprint for creating objects: 


// Creating a model 
const Course = mongoose.model(‘Course’, courseSchema);


CRUD Operations 
// Saving a document 
let course = new Course({ name: ‘…’ });
course = await course.save();



// Querying documents 

const courses = await Course
 .find({ author: ‘Mosh’, isPublished: true })
 .skip(10)
 .limit(10)
 .sort({ name: 1, price: -1 })
 .select({ name: 1, price: 1 });



// Updating a document (query first) 


const course = await Course.findById(id);
if (!course) return; 
course.set({ name: ‘…’ });
course.save();



// Updating a document (update first) 

const result = await Course.update({ _id: id }, {
 $set: { name: ‘…’ }
});



// Updating a document (update first) and return it

const result = await Course.findByIdAndUpdate({ _id: id }, {
 $set: { name: ‘…’ }
}, { new: true });



// Removing a document 

const result = await Course.deleteOne({ _id: id });
const result = await Course.deleteMany({ _id: id });
const course = await Course.findByIdAndRemove(id);



///////////////////////    CLASSES AND OBJECTS    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1) Classes, Objects
// Human, John -> Object is an instance of a class, Class is a Blueprint.
